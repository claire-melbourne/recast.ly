import App from '../../src/components/App.js';

describe('App', function () {
  var {
    Simulate,
    renderIntoDocument,
    findRenderedDOMComponentWithClass,
    scryRenderedDOMComponentsWithClass
  } = ReactTestUtils;

  var app;

  beforeEach(function () {
    app = renderIntoDocument(React.createElement(App, { searchYouTube: () => {} }));
  });

  it('should be a stateful class component', function () {
    expect(React.Component.isPrototypeOf(App)).to.be.true;
  });

  it('should render a single VideoPlayer component', function () {
    var videoPlayer = findRenderedDOMComponentWithClass(app, 'video-player');
    expect(videoPlayer).to.exist;
  });

  it('should render a single VideoList component', function () {
    var videoList = findRenderedDOMComponentWithClass(app, 'video-list');
    expect(videoList).to.exist;
  });

  it('should update the video player when a video entry\'s title is clicked', function () {
    // This test will only works once `App` is refactored into a stateful class component
    // because `renderIntoDocument` does not work with stateless class components
    expect(React.Component.isPrototypeOf(App)).to.be.true;

    var videoEntryTitleElements = scryRenderedDOMComponentsWithClass(app, 'video-list-entry-title');

    videoEntryTitleElements.forEach(videoEntryTitle => {
      Simulate.click(videoEntryTitle);
      var player = findRenderedDOMComponentWithClass(app, 'video-player');
      var playerTitle = player.querySelector('.video-player-details h3');

      // This test assumes that if you can successfully update the video player's title,
      // you can also update the video and description
      expect(playerTitle.innerHTML).to.equal(videoEntryTitle.innerHTML);
    });
  });

  describe('when rendering live data from YouTube', function () {
    var searchYouTubeStub;

    beforeEach(function () {
      searchYouTubeStub = sinon.stub();
      searchYouTubeStub.yields(window.fakeVideoData);
      app = renderIntoDocument(React.createElement(App, { searchYouTube: searchYouTubeStub }));
    });

    it('should call `searchYouTube` when app is initialized', function () {
      expect(searchYouTubeStub.called).to.be.true;
    });

    it('should load live data when app is initialized', function () {
      expect(searchYouTubeStub.called).to.be.true;

      var videoEntryTitleElements = scryRenderedDOMComponentsWithClass(app, 'video-list-entry-title');

      videoEntryTitleElements.forEach((videoEntryTitle, i) => expect(videoEntryTitle.innerHTML).to.equal(fakeVideoData[i].snippet.title));
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NwZWMvY29tcG9uZW50cy9BcHBTcGVjLmpzeCJdLCJuYW1lcyI6WyJBcHAiLCJkZXNjcmliZSIsIlNpbXVsYXRlIiwicmVuZGVySW50b0RvY3VtZW50IiwiZmluZFJlbmRlcmVkRE9NQ29tcG9uZW50V2l0aENsYXNzIiwic2NyeVJlbmRlcmVkRE9NQ29tcG9uZW50c1dpdGhDbGFzcyIsIlJlYWN0VGVzdFV0aWxzIiwiYXBwIiwiYmVmb3JlRWFjaCIsIml0IiwiZXhwZWN0IiwiUmVhY3QiLCJDb21wb25lbnQiLCJpc1Byb3RvdHlwZU9mIiwidG8iLCJiZSIsInRydWUiLCJ2aWRlb1BsYXllciIsImV4aXN0IiwidmlkZW9MaXN0IiwidmlkZW9FbnRyeVRpdGxlRWxlbWVudHMiLCJmb3JFYWNoIiwidmlkZW9FbnRyeVRpdGxlIiwiY2xpY2siLCJwbGF5ZXIiLCJwbGF5ZXJUaXRsZSIsInF1ZXJ5U2VsZWN0b3IiLCJpbm5lckhUTUwiLCJlcXVhbCIsInNlYXJjaFlvdVR1YmVTdHViIiwic2lub24iLCJzdHViIiwieWllbGRzIiwid2luZG93IiwiZmFrZVZpZGVvRGF0YSIsImNhbGxlZCIsImkiLCJzbmlwcGV0IiwidGl0bGUiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLEdBQVAsTUFBZ0IsNkJBQWhCOztBQUVBQyxTQUFTLEtBQVQsRUFBZ0IsWUFBVztBQUN6QixNQUFJO0FBQ0ZDLFlBREU7QUFFRkMsc0JBRkU7QUFHRkMscUNBSEU7QUFJRkM7QUFKRSxNQUtBQyxjQUxKOztBQU9BLE1BQUlDLEdBQUo7O0FBRUFDLGFBQVcsWUFBVztBQUNwQkQsVUFBTUosbUJBQ0osb0JBQUMsR0FBRCxJQUFLLGVBQWUsTUFBTSxDQUFFLENBQTVCLEdBREksQ0FBTjtBQUdELEdBSkQ7O0FBTUFNLEtBQUcsc0NBQUgsRUFBMkMsWUFBVztBQUNwREMsV0FBT0MsTUFBTUMsU0FBTixDQUFnQkMsYUFBaEIsQ0FBOEJiLEdBQTlCLENBQVAsRUFBMkNjLEVBQTNDLENBQThDQyxFQUE5QyxDQUFpREMsSUFBakQ7QUFDRCxHQUZEOztBQUlBUCxLQUFHLDhDQUFILEVBQW1ELFlBQVc7QUFDNUQsUUFBSVEsY0FBY2Isa0NBQWtDRyxHQUFsQyxFQUF1QyxjQUF2QyxDQUFsQjtBQUNBRyxXQUFPTyxXQUFQLEVBQW9CSCxFQUFwQixDQUF1QkksS0FBdkI7QUFDRCxHQUhEOztBQUtBVCxLQUFHLDRDQUFILEVBQWlELFlBQVc7QUFDMUQsUUFBSVUsWUFBWWYsa0NBQWtDRyxHQUFsQyxFQUF1QyxZQUF2QyxDQUFoQjtBQUNBRyxXQUFPUyxTQUFQLEVBQWtCTCxFQUFsQixDQUFxQkksS0FBckI7QUFDRCxHQUhEOztBQUtBVCxLQUFHLHVFQUFILEVBQTRFLFlBQVc7QUFDckY7QUFDQTtBQUNBQyxXQUFPQyxNQUFNQyxTQUFOLENBQWdCQyxhQUFoQixDQUE4QmIsR0FBOUIsQ0FBUCxFQUEyQ2MsRUFBM0MsQ0FBOENDLEVBQTlDLENBQWlEQyxJQUFqRDs7QUFFQSxRQUFJSSwwQkFBMEJmLG1DQUFtQ0UsR0FBbkMsRUFBd0Msd0JBQXhDLENBQTlCOztBQUVBYSw0QkFBd0JDLE9BQXhCLENBQWlDQyxlQUFELElBQXFCO0FBQ25EcEIsZUFBU3FCLEtBQVQsQ0FBZUQsZUFBZjtBQUNBLFVBQUlFLFNBQVNwQixrQ0FBa0NHLEdBQWxDLEVBQXVDLGNBQXZDLENBQWI7QUFDQSxVQUFJa0IsY0FBY0QsT0FBT0UsYUFBUCxDQUFxQiwwQkFBckIsQ0FBbEI7O0FBRUE7QUFDQTtBQUNBaEIsYUFBT2UsWUFBWUUsU0FBbkIsRUFBOEJiLEVBQTlCLENBQWlDYyxLQUFqQyxDQUF1Q04sZ0JBQWdCSyxTQUF2RDtBQUNELEtBUkQ7QUFTRCxHQWhCRDs7QUFrQkExQixXQUFTLHVDQUFULEVBQWtELFlBQVc7QUFDM0QsUUFBSTRCLGlCQUFKOztBQUVBckIsZUFBVyxZQUFXO0FBQ3BCcUIsMEJBQW9CQyxNQUFNQyxJQUFOLEVBQXBCO0FBQ0FGLHdCQUFrQkcsTUFBbEIsQ0FBeUJDLE9BQU9DLGFBQWhDO0FBQ0EzQixZQUFNSixtQkFDSixvQkFBQyxHQUFELElBQUssZUFBZTBCLGlCQUFwQixHQURJLENBQU47QUFHRCxLQU5EOztBQVFBcEIsT0FBRyxxREFBSCxFQUEwRCxZQUFXO0FBQ25FQyxhQUFPbUIsa0JBQWtCTSxNQUF6QixFQUFpQ3JCLEVBQWpDLENBQW9DQyxFQUFwQyxDQUF1Q0MsSUFBdkM7QUFDRCxLQUZEOztBQUlBUCxPQUFHLCtDQUFILEVBQW9ELFlBQVc7QUFDN0RDLGFBQU9tQixrQkFBa0JNLE1BQXpCLEVBQWlDckIsRUFBakMsQ0FBb0NDLEVBQXBDLENBQXVDQyxJQUF2Qzs7QUFFQSxVQUFJSSwwQkFBMEJmLG1DQUFtQ0UsR0FBbkMsRUFBd0Msd0JBQXhDLENBQTlCOztBQUVBYSw4QkFBd0JDLE9BQXhCLENBQWdDLENBQUNDLGVBQUQsRUFBa0JjLENBQWxCLEtBQzlCMUIsT0FBT1ksZ0JBQWdCSyxTQUF2QixFQUFrQ2IsRUFBbEMsQ0FBcUNjLEtBQXJDLENBQTJDTSxjQUFjRSxDQUFkLEVBQWlCQyxPQUFqQixDQUF5QkMsS0FBcEUsQ0FERjtBQUdELEtBUkQ7QUFVRCxHQXpCRDtBQTBCRCxDQTFFRCIsImZpbGUiOiJBcHBTcGVjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEFwcCBmcm9tICcuLi8uLi9zcmMvY29tcG9uZW50cy9BcHAuanMnO1xuXG5kZXNjcmliZSgnQXBwJywgZnVuY3Rpb24oKSB7XG4gIHZhciB7XG4gICAgU2ltdWxhdGUsXG4gICAgcmVuZGVySW50b0RvY3VtZW50LFxuICAgIGZpbmRSZW5kZXJlZERPTUNvbXBvbmVudFdpdGhDbGFzcyxcbiAgICBzY3J5UmVuZGVyZWRET01Db21wb25lbnRzV2l0aENsYXNzXG4gIH0gPSBSZWFjdFRlc3RVdGlscztcblxuICB2YXIgYXBwO1xuXG4gIGJlZm9yZUVhY2goZnVuY3Rpb24oKSB7XG4gICAgYXBwID0gcmVuZGVySW50b0RvY3VtZW50KFxuICAgICAgPEFwcCBzZWFyY2hZb3VUdWJlPXsoKSA9PiB7fX0vPlxuICAgICk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgYmUgYSBzdGF0ZWZ1bCBjbGFzcyBjb21wb25lbnQnLCBmdW5jdGlvbigpIHtcbiAgICBleHBlY3QoUmVhY3QuQ29tcG9uZW50LmlzUHJvdG90eXBlT2YoQXBwKSkudG8uYmUudHJ1ZTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCByZW5kZXIgYSBzaW5nbGUgVmlkZW9QbGF5ZXIgY29tcG9uZW50JywgZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZpZGVvUGxheWVyID0gZmluZFJlbmRlcmVkRE9NQ29tcG9uZW50V2l0aENsYXNzKGFwcCwgJ3ZpZGVvLXBsYXllcicpO1xuICAgIGV4cGVjdCh2aWRlb1BsYXllcikudG8uZXhpc3Q7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmVuZGVyIGEgc2luZ2xlIFZpZGVvTGlzdCBjb21wb25lbnQnLCBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmlkZW9MaXN0ID0gZmluZFJlbmRlcmVkRE9NQ29tcG9uZW50V2l0aENsYXNzKGFwcCwgJ3ZpZGVvLWxpc3QnKTtcbiAgICBleHBlY3QodmlkZW9MaXN0KS50by5leGlzdDtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCB1cGRhdGUgdGhlIHZpZGVvIHBsYXllciB3aGVuIGEgdmlkZW8gZW50cnlcXCdzIHRpdGxlIGlzIGNsaWNrZWQnLCBmdW5jdGlvbigpIHtcbiAgICAvLyBUaGlzIHRlc3Qgd2lsbCBvbmx5IHdvcmtzIG9uY2UgYEFwcGAgaXMgcmVmYWN0b3JlZCBpbnRvIGEgc3RhdGVmdWwgY2xhc3MgY29tcG9uZW50XG4gICAgLy8gYmVjYXVzZSBgcmVuZGVySW50b0RvY3VtZW50YCBkb2VzIG5vdCB3b3JrIHdpdGggc3RhdGVsZXNzIGNsYXNzIGNvbXBvbmVudHNcbiAgICBleHBlY3QoUmVhY3QuQ29tcG9uZW50LmlzUHJvdG90eXBlT2YoQXBwKSkudG8uYmUudHJ1ZTtcblxuICAgIHZhciB2aWRlb0VudHJ5VGl0bGVFbGVtZW50cyA9IHNjcnlSZW5kZXJlZERPTUNvbXBvbmVudHNXaXRoQ2xhc3MoYXBwLCAndmlkZW8tbGlzdC1lbnRyeS10aXRsZScpO1xuXG4gICAgdmlkZW9FbnRyeVRpdGxlRWxlbWVudHMuZm9yRWFjaCgodmlkZW9FbnRyeVRpdGxlKSA9PiB7XG4gICAgICBTaW11bGF0ZS5jbGljayh2aWRlb0VudHJ5VGl0bGUpO1xuICAgICAgdmFyIHBsYXllciA9IGZpbmRSZW5kZXJlZERPTUNvbXBvbmVudFdpdGhDbGFzcyhhcHAsICd2aWRlby1wbGF5ZXInKTtcbiAgICAgIHZhciBwbGF5ZXJUaXRsZSA9IHBsYXllci5xdWVyeVNlbGVjdG9yKCcudmlkZW8tcGxheWVyLWRldGFpbHMgaDMnKTtcblxuICAgICAgLy8gVGhpcyB0ZXN0IGFzc3VtZXMgdGhhdCBpZiB5b3UgY2FuIHN1Y2Nlc3NmdWxseSB1cGRhdGUgdGhlIHZpZGVvIHBsYXllcidzIHRpdGxlLFxuICAgICAgLy8geW91IGNhbiBhbHNvIHVwZGF0ZSB0aGUgdmlkZW8gYW5kIGRlc2NyaXB0aW9uXG4gICAgICBleHBlY3QocGxheWVyVGl0bGUuaW5uZXJIVE1MKS50by5lcXVhbCh2aWRlb0VudHJ5VGl0bGUuaW5uZXJIVE1MKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3doZW4gcmVuZGVyaW5nIGxpdmUgZGF0YSBmcm9tIFlvdVR1YmUnLCBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2VhcmNoWW91VHViZVN0dWI7XG5cbiAgICBiZWZvcmVFYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgc2VhcmNoWW91VHViZVN0dWIgPSBzaW5vbi5zdHViKCk7XG4gICAgICBzZWFyY2hZb3VUdWJlU3R1Yi55aWVsZHMod2luZG93LmZha2VWaWRlb0RhdGEpO1xuICAgICAgYXBwID0gcmVuZGVySW50b0RvY3VtZW50KFxuICAgICAgICA8QXBwIHNlYXJjaFlvdVR1YmU9e3NlYXJjaFlvdVR1YmVTdHVifSAvPlxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgY2FsbCBgc2VhcmNoWW91VHViZWAgd2hlbiBhcHAgaXMgaW5pdGlhbGl6ZWQnLCBmdW5jdGlvbigpIHtcbiAgICAgIGV4cGVjdChzZWFyY2hZb3VUdWJlU3R1Yi5jYWxsZWQpLnRvLmJlLnRydWU7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGxvYWQgbGl2ZSBkYXRhIHdoZW4gYXBwIGlzIGluaXRpYWxpemVkJywgZnVuY3Rpb24oKSB7XG4gICAgICBleHBlY3Qoc2VhcmNoWW91VHViZVN0dWIuY2FsbGVkKS50by5iZS50cnVlO1xuXG4gICAgICB2YXIgdmlkZW9FbnRyeVRpdGxlRWxlbWVudHMgPSBzY3J5UmVuZGVyZWRET01Db21wb25lbnRzV2l0aENsYXNzKGFwcCwgJ3ZpZGVvLWxpc3QtZW50cnktdGl0bGUnKTtcblxuICAgICAgdmlkZW9FbnRyeVRpdGxlRWxlbWVudHMuZm9yRWFjaCgodmlkZW9FbnRyeVRpdGxlLCBpKSA9PlxuICAgICAgICBleHBlY3QodmlkZW9FbnRyeVRpdGxlLmlubmVySFRNTCkudG8uZXF1YWwoZmFrZVZpZGVvRGF0YVtpXS5zbmlwcGV0LnRpdGxlKVxuICAgICAgKTtcbiAgICB9KTtcblxuICB9KTtcbn0pO1xuIl19