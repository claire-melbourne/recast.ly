import VideoList from '../../src/components/VideoList.js';
import VideoListEntry from '../../src/components/VideoListEntry.js';

describe('VideoList', function () {
  // When testing a React component that renders other nested components,
  // it's a common practice to "shallow render" the component, or render
  // only a single level deep. This isolates the component from it's children
  // See more: https://facebook.github.io/react/docs/test-utils.html#shallow-rendering

  it('should be a stateless functional component', function () {
    expect(React.Component.isPrototypeOf(VideoList)).to.be.false;
  });

  it('should render one `VideoListEntry` when given one video', function () {
    var shallowRenderer = new ReactShallowRenderer();

    var oneFakeVideo = window.fakeVideoData.slice(-1);
    shallowRenderer.render(React.createElement(VideoList, { videos: oneFakeVideo }));

    var videoList = shallowRenderer.getRenderOutput();
    expect(videoList.props.children).to.have.length(1);
    videoList.props.children.forEach(child => expect(child.type).to.equal(VideoListEntry));
  });

  it('should render three `VideoListEntry` when given three videos', function () {
    var shallowRenderer = new ReactShallowRenderer();

    var threeFakeVideos = window.fakeVideoData.slice(-3);
    shallowRenderer.render(React.createElement(VideoList, { videos: threeFakeVideos }));

    var videoList = shallowRenderer.getRenderOutput();
    expect(videoList.props.children).to.have.length(3);
    videoList.props.children.forEach(child => expect(child.type).to.equal(VideoListEntry));
  });

  it('should render five `VideoListEntry` when given five videos', function () {
    var shallowRenderer = new ReactShallowRenderer();

    var fiveFakeVideos = window.fakeVideoData.slice(-5);
    shallowRenderer.render(React.createElement(VideoList, { videos: fiveFakeVideos }));

    var videoList = shallowRenderer.getRenderOutput();
    expect(videoList.props.children).to.have.length(5);
    videoList.props.children.forEach(child => expect(child.type).to.equal(VideoListEntry));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NwZWMvY29tcG9uZW50cy9WaWRlb0xpc3RTcGVjLmpzeCJdLCJuYW1lcyI6WyJWaWRlb0xpc3QiLCJWaWRlb0xpc3RFbnRyeSIsImRlc2NyaWJlIiwiaXQiLCJleHBlY3QiLCJSZWFjdCIsIkNvbXBvbmVudCIsImlzUHJvdG90eXBlT2YiLCJ0byIsImJlIiwiZmFsc2UiLCJzaGFsbG93UmVuZGVyZXIiLCJSZWFjdFNoYWxsb3dSZW5kZXJlciIsIm9uZUZha2VWaWRlbyIsIndpbmRvdyIsImZha2VWaWRlb0RhdGEiLCJzbGljZSIsInJlbmRlciIsInZpZGVvTGlzdCIsImdldFJlbmRlck91dHB1dCIsInByb3BzIiwiY2hpbGRyZW4iLCJoYXZlIiwibGVuZ3RoIiwiZm9yRWFjaCIsImNoaWxkIiwidHlwZSIsImVxdWFsIiwidGhyZWVGYWtlVmlkZW9zIiwiZml2ZUZha2VWaWRlb3MiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLFNBQVAsTUFBc0IsbUNBQXRCO0FBQ0EsT0FBT0MsY0FBUCxNQUEyQix3Q0FBM0I7O0FBRUFDLFNBQVMsV0FBVCxFQUFzQixZQUFXO0FBQy9CO0FBQ0E7QUFDQTtBQUNBOztBQUVBQyxLQUFHLDRDQUFILEVBQWlELFlBQVc7QUFDMURDLFdBQU9DLE1BQU1DLFNBQU4sQ0FBZ0JDLGFBQWhCLENBQThCUCxTQUE5QixDQUFQLEVBQWlEUSxFQUFqRCxDQUFvREMsRUFBcEQsQ0FBdURDLEtBQXZEO0FBQ0QsR0FGRDs7QUFJQVAsS0FBRyx5REFBSCxFQUE4RCxZQUFXO0FBQ3ZFLFFBQUlRLGtCQUFrQixJQUFJQyxvQkFBSixFQUF0Qjs7QUFFQSxRQUFJQyxlQUFlQyxPQUFPQyxhQUFQLENBQXFCQyxLQUFyQixDQUEyQixDQUFDLENBQTVCLENBQW5CO0FBQ0FMLG9CQUFnQk0sTUFBaEIsQ0FDRSxvQkFBQyxTQUFELElBQVcsUUFBUUosWUFBbkIsR0FERjs7QUFJQSxRQUFJSyxZQUFZUCxnQkFBZ0JRLGVBQWhCLEVBQWhCO0FBQ0FmLFdBQU9jLFVBQVVFLEtBQVYsQ0FBZ0JDLFFBQXZCLEVBQWlDYixFQUFqQyxDQUFvQ2MsSUFBcEMsQ0FBeUNDLE1BQXpDLENBQWdELENBQWhEO0FBQ0FMLGNBQVVFLEtBQVYsQ0FBZ0JDLFFBQWhCLENBQXlCRyxPQUF6QixDQUFpQ0MsU0FBU3JCLE9BQU9xQixNQUFNQyxJQUFiLEVBQW1CbEIsRUFBbkIsQ0FBc0JtQixLQUF0QixDQUE0QjFCLGNBQTVCLENBQTFDO0FBQ0QsR0FYRDs7QUFhQUUsS0FBRyw4REFBSCxFQUFtRSxZQUFXO0FBQzVFLFFBQUlRLGtCQUFrQixJQUFJQyxvQkFBSixFQUF0Qjs7QUFFQSxRQUFJZ0Isa0JBQWtCZCxPQUFPQyxhQUFQLENBQXFCQyxLQUFyQixDQUEyQixDQUFDLENBQTVCLENBQXRCO0FBQ0FMLG9CQUFnQk0sTUFBaEIsQ0FDRSxvQkFBQyxTQUFELElBQVcsUUFBUVcsZUFBbkIsR0FERjs7QUFJQSxRQUFJVixZQUFZUCxnQkFBZ0JRLGVBQWhCLEVBQWhCO0FBQ0FmLFdBQU9jLFVBQVVFLEtBQVYsQ0FBZ0JDLFFBQXZCLEVBQWlDYixFQUFqQyxDQUFvQ2MsSUFBcEMsQ0FBeUNDLE1BQXpDLENBQWdELENBQWhEO0FBQ0FMLGNBQVVFLEtBQVYsQ0FBZ0JDLFFBQWhCLENBQXlCRyxPQUF6QixDQUFpQ0MsU0FBU3JCLE9BQU9xQixNQUFNQyxJQUFiLEVBQW1CbEIsRUFBbkIsQ0FBc0JtQixLQUF0QixDQUE0QjFCLGNBQTVCLENBQTFDO0FBQ0QsR0FYRDs7QUFhQUUsS0FBRyw0REFBSCxFQUFpRSxZQUFXO0FBQzFFLFFBQUlRLGtCQUFrQixJQUFJQyxvQkFBSixFQUF0Qjs7QUFFQSxRQUFJaUIsaUJBQWlCZixPQUFPQyxhQUFQLENBQXFCQyxLQUFyQixDQUEyQixDQUFDLENBQTVCLENBQXJCO0FBQ0FMLG9CQUFnQk0sTUFBaEIsQ0FDRSxvQkFBQyxTQUFELElBQVcsUUFBUVksY0FBbkIsR0FERjs7QUFJQSxRQUFJWCxZQUFZUCxnQkFBZ0JRLGVBQWhCLEVBQWhCO0FBQ0FmLFdBQU9jLFVBQVVFLEtBQVYsQ0FBZ0JDLFFBQXZCLEVBQWlDYixFQUFqQyxDQUFvQ2MsSUFBcEMsQ0FBeUNDLE1BQXpDLENBQWdELENBQWhEO0FBQ0FMLGNBQVVFLEtBQVYsQ0FBZ0JDLFFBQWhCLENBQXlCRyxPQUF6QixDQUFpQ0MsU0FBU3JCLE9BQU9xQixNQUFNQyxJQUFiLEVBQW1CbEIsRUFBbkIsQ0FBc0JtQixLQUF0QixDQUE0QjFCLGNBQTVCLENBQTFDO0FBQ0QsR0FYRDtBQVlELENBaEREIiwiZmlsZSI6IlZpZGVvTGlzdFNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVmlkZW9MaXN0IGZyb20gJy4uLy4uL3NyYy9jb21wb25lbnRzL1ZpZGVvTGlzdC5qcyc7XG5pbXBvcnQgVmlkZW9MaXN0RW50cnkgZnJvbSAnLi4vLi4vc3JjL2NvbXBvbmVudHMvVmlkZW9MaXN0RW50cnkuanMnO1xuXG5kZXNjcmliZSgnVmlkZW9MaXN0JywgZnVuY3Rpb24oKSB7XG4gIC8vIFdoZW4gdGVzdGluZyBhIFJlYWN0IGNvbXBvbmVudCB0aGF0IHJlbmRlcnMgb3RoZXIgbmVzdGVkIGNvbXBvbmVudHMsXG4gIC8vIGl0J3MgYSBjb21tb24gcHJhY3RpY2UgdG8gXCJzaGFsbG93IHJlbmRlclwiIHRoZSBjb21wb25lbnQsIG9yIHJlbmRlclxuICAvLyBvbmx5IGEgc2luZ2xlIGxldmVsIGRlZXAuIFRoaXMgaXNvbGF0ZXMgdGhlIGNvbXBvbmVudCBmcm9tIGl0J3MgY2hpbGRyZW5cbiAgLy8gU2VlIG1vcmU6IGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdGVzdC11dGlscy5odG1sI3NoYWxsb3ctcmVuZGVyaW5nXG5cbiAgaXQoJ3Nob3VsZCBiZSBhIHN0YXRlbGVzcyBmdW5jdGlvbmFsIGNvbXBvbmVudCcsIGZ1bmN0aW9uKCkge1xuICAgIGV4cGVjdChSZWFjdC5Db21wb25lbnQuaXNQcm90b3R5cGVPZihWaWRlb0xpc3QpKS50by5iZS5mYWxzZTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCByZW5kZXIgb25lIGBWaWRlb0xpc3RFbnRyeWAgd2hlbiBnaXZlbiBvbmUgdmlkZW8nLCBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2hhbGxvd1JlbmRlcmVyID0gbmV3IFJlYWN0U2hhbGxvd1JlbmRlcmVyKCk7XG5cbiAgICB2YXIgb25lRmFrZVZpZGVvID0gd2luZG93LmZha2VWaWRlb0RhdGEuc2xpY2UoLTEpO1xuICAgIHNoYWxsb3dSZW5kZXJlci5yZW5kZXIoXG4gICAgICA8VmlkZW9MaXN0IHZpZGVvcz17b25lRmFrZVZpZGVvfSAvPlxuICAgICk7XG5cbiAgICB2YXIgdmlkZW9MaXN0ID0gc2hhbGxvd1JlbmRlcmVyLmdldFJlbmRlck91dHB1dCgpO1xuICAgIGV4cGVjdCh2aWRlb0xpc3QucHJvcHMuY2hpbGRyZW4pLnRvLmhhdmUubGVuZ3RoKDEpO1xuICAgIHZpZGVvTGlzdC5wcm9wcy5jaGlsZHJlbi5mb3JFYWNoKGNoaWxkID0+IGV4cGVjdChjaGlsZC50eXBlKS50by5lcXVhbChWaWRlb0xpc3RFbnRyeSkpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJlbmRlciB0aHJlZSBgVmlkZW9MaXN0RW50cnlgIHdoZW4gZ2l2ZW4gdGhyZWUgdmlkZW9zJywgZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNoYWxsb3dSZW5kZXJlciA9IG5ldyBSZWFjdFNoYWxsb3dSZW5kZXJlcigpO1xuXG4gICAgdmFyIHRocmVlRmFrZVZpZGVvcyA9IHdpbmRvdy5mYWtlVmlkZW9EYXRhLnNsaWNlKC0zKTtcbiAgICBzaGFsbG93UmVuZGVyZXIucmVuZGVyKFxuICAgICAgPFZpZGVvTGlzdCB2aWRlb3M9e3RocmVlRmFrZVZpZGVvc30gLz5cbiAgICApO1xuXG4gICAgdmFyIHZpZGVvTGlzdCA9IHNoYWxsb3dSZW5kZXJlci5nZXRSZW5kZXJPdXRwdXQoKTtcbiAgICBleHBlY3QodmlkZW9MaXN0LnByb3BzLmNoaWxkcmVuKS50by5oYXZlLmxlbmd0aCgzKTtcbiAgICB2aWRlb0xpc3QucHJvcHMuY2hpbGRyZW4uZm9yRWFjaChjaGlsZCA9PiBleHBlY3QoY2hpbGQudHlwZSkudG8uZXF1YWwoVmlkZW9MaXN0RW50cnkpKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCByZW5kZXIgZml2ZSBgVmlkZW9MaXN0RW50cnlgIHdoZW4gZ2l2ZW4gZml2ZSB2aWRlb3MnLCBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2hhbGxvd1JlbmRlcmVyID0gbmV3IFJlYWN0U2hhbGxvd1JlbmRlcmVyKCk7XG5cbiAgICB2YXIgZml2ZUZha2VWaWRlb3MgPSB3aW5kb3cuZmFrZVZpZGVvRGF0YS5zbGljZSgtNSk7XG4gICAgc2hhbGxvd1JlbmRlcmVyLnJlbmRlcihcbiAgICAgIDxWaWRlb0xpc3QgdmlkZW9zPXtmaXZlRmFrZVZpZGVvc30gLz5cbiAgICApO1xuXG4gICAgdmFyIHZpZGVvTGlzdCA9IHNoYWxsb3dSZW5kZXJlci5nZXRSZW5kZXJPdXRwdXQoKTtcbiAgICBleHBlY3QodmlkZW9MaXN0LnByb3BzLmNoaWxkcmVuKS50by5oYXZlLmxlbmd0aCg1KTtcbiAgICB2aWRlb0xpc3QucHJvcHMuY2hpbGRyZW4uZm9yRWFjaChjaGlsZCA9PiBleHBlY3QoY2hpbGQudHlwZSkudG8uZXF1YWwoVmlkZW9MaXN0RW50cnkpKTtcbiAgfSk7XG59KTsiXX0=